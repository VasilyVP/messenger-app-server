{"version":3,"sources":["actions/types.ts","middleware/sockets.ts","actions/index.ts","components/Join.tsx","components/ChatList.tsx","components/MessageInput.tsx","components/Users.tsx","components/App/App.tsx","serviceWorker.ts","common/consts.ts","reducers/index.ts","reducers/users.ts","reducers/messages.ts","store/index.ts","index.tsx"],"names":["actionTypes","socketClient","io","connect","useSocket","types","socket","leaveChat","emit","type","useStyles","makeStyles","theme","createStyles","root","margin","spacing","textField","width","button","classes","dispatch","useDispatch","user","useSelector","state","users","useState","nickname","setNickname","Paper","Box","className","display","justifyContent","color","pr","alignItems","Typography","variant","IconButton","onClick","TextField","id","label","size","value","onChange","e","target","Button","joinUser","messages","listRef","useRef","height","renderRow","props","index","style","ListItem","key","dense","ListItemAvatar","Avatar","ListItemText","primary","text","secondary","useMediaQuery","useEffect","on","message","postMsg","msg","newMessage","off","current","scrollToItem","length","itemSize","itemCount","ref","setText","p","flexGrow","m","fullWidth","userItem","list","maxHeight","overflow","usersItems","usersList","map","i","updateUsers","List","App","CssBaseline","Container","my","Join","Grid","container","direction","item","xs","sm","Users","ChatList","mt","MessageInput","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","actions","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.03c23c87.chunk.js","sourcesContent":["import { messageT } from \"../common/types\";\r\n\r\nexport enum actionTypes {\r\n    joinUser = 'Add new chat user',\r\n    leaveChat = 'Leave chat',\r\n    postMsg = 'Post new message',\r\n    updateUsers = 'Update users list'\r\n}\r\n\r\nexport type actionsT = {\r\n    type: actionTypes,\r\n    user: string,\r\n    msg: messageT,\r\n    users: string[],\r\n}","import io from 'socket.io-client'\r\n\r\nconst socketClient = io.connect();\r\n\r\nexport type socketClientT = typeof socketClient;\r\n\r\nexport function useSocket() {\r\n    return socketClient;\r\n}","//import { Dispatch } from 'redux'\r\nimport { actionTypes } from './types'\r\nimport { messageT } from '../common/types'\r\nimport { useSocket } from '../middleware/sockets'\r\n\r\nconst types = actionTypes;\r\nconst socket = useSocket();\r\n\r\nexport function joinUser(user: string) {\r\n    socket.emit('register user', user);\r\n\r\n    return {\r\n        type: types.joinUser,\r\n        user: user\r\n    }\r\n}\r\n\r\nexport function updateUsers(usersList: string[]) {\r\n    return {\r\n        type: types.updateUsers,\r\n        users: usersList\r\n    }\r\n}\r\n\r\nexport function leaveChat() {\r\n    socket.emit('leave chat');\r\n\r\n    return {\r\n        type: types.leaveChat\r\n    }\r\n}\r\n\r\nexport function postMessage(message: messageT) {\r\n    socket.emit('post message', message.text);\r\n\r\n    return {\r\n        type: types.postMsg,\r\n        msg: message\r\n    }\r\n}\r\n\r\nexport function newMessage(message: messageT) {\r\n    return {\r\n        type: types.postMsg,\r\n        msg: message\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Box, Typography } from '@material-ui/core'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { Paper, TextField, Button, IconButton } from '@material-ui/core'\r\nimport { joinUser, leaveChat} from '../actions'\r\nimport { stateT } from '../common/types'\r\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        textField: {\r\n            width: '33ch',\r\n        },\r\n        button: {\r\n            width: '15ch'\r\n        }\r\n    }),\r\n);\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state: stateT) => state.users.user);\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Box className={classes.root} display=\"flex\" justifyContent=\"flex-end\">\r\n                    {!user ?\r\n                        <>\r\n                            <TextField\r\n                                id=\"nickname\"\r\n                                label=\"Nickname\"\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                value={nickname}\r\n                                onChange={e => setNickname(e.target.value)} />\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                onClick={() => dispatch(joinUser(nickname))}\r\n                            >\r\n                                Join\r\n                            </Button>\r\n                        </>\r\n                        :\r\n                        <Box className={classes.root} color=\"secondary.main\" pr={1} display=\"flex\" alignItems=\"center\">\r\n                            <Typography variant=\"h6\">Hey, {user}!</Typography>\r\n                            <IconButton onClick={() => dispatch(leaveChat())}>\r\n                                <MeetingRoomIcon color=\"primary\" />\r\n                            </IconButton>\r\n                        </Box>\r\n                    }\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Paper, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core'\r\nimport { useMediaQuery } from '@material-ui/core'\r\n//import { useTheme } from '@material-ui/core/styles'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport { FixedSizeList, ListChildComponentProps } from 'react-window'\r\nimport { stateT, messageT } from '../common/types'\r\nimport { useSocket } from '../middleware/sockets'\r\nimport { newMessage } from '../actions'\r\nimport 'react-virtualized/styles.css';\r\n\r\nexport default () => {\r\n    const messages = useSelector((state: stateT) => state.messages);\r\n    const dispatch = useDispatch();\r\n    const socket = useSocket();\r\n    const listRef = useRef<FixedSizeList>(null);\r\n\r\n    const lessLg = useMediaQuery('(max-width:1280px)');\r\n\r\n    let height = 600;\r\n    if (lessLg) height = 400;\r\n\r\n    useEffect(() => {\r\n        socket.on('new message', (message: messageT) => dispatch(newMessage(message)));\r\n        return () => { socket.off('new message') };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (listRef.current !== null) listRef.current.scrollToItem(messages.length - 1, 'end');\r\n    }, [messages.length]);\r\n\r\n    function renderRow(props: ListChildComponentProps) {\r\n        const { index, style } = props;\r\n        return (\r\n            <ListItem key={index} dense={true} style={style}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <InsertEmoticonIcon />\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={messages[index].text}\r\n                    secondary={messages[index].user}\r\n                />\r\n            </ListItem>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <FixedSizeList\r\n                height={height}\r\n                width={'100%'}\r\n                itemSize={46}\r\n                itemCount={messages.length}\r\n                ref={listRef}\r\n            >\r\n                {renderRow}\r\n            </FixedSizeList>\r\n        </Paper>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { Paper, TextField, Button, Box } from '@material-ui/core'\r\n//import { actionTypes as actions } from '../actions/types'\r\nimport { postMessage } from '../actions'\r\nimport { stateT } from '../common/types'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textField: {\r\n            //flexGrow: 1\r\n        },\r\n        button: {\r\n            // width: '15%',\r\n            height: 55\r\n        }\r\n    }),\r\n);\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n    const [text, setText] = useState('');\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state: stateT) => state.users.user)\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Box display=\"flex\" p={1}>\r\n                    <Box flexGrow={1} m={1}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-basic\"\r\n                            label=\"Text here\"\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                            fullWidth />\r\n                    </Box>\r\n                    <Box m={1}>\r\n                        <Button\r\n                            className={classes.button} variant=\"contained\" color=\"primary\" size=\"large\"\r\n                            onClick={() => {\r\n                                dispatch(postMessage({\r\n                                    user: user,\r\n                                    text: text\r\n                                }));\r\n                                setText('');\r\n                            }}\r\n                        >\r\n                            Send\r\n                    </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div >\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { Paper, List, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon'\r\nimport { stateT } from '../common/types'\r\nimport { useSocket } from '../middleware/sockets'\r\nimport { updateUsers, leaveChat } from '../actions'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        userItem: {\r\n            color: 'green'\r\n        },\r\n        list: {\r\n            ['@media (max-width:1280px)']: {\r\n                maxHeight: \"130px\",\r\n                overflow: \"auto\"\r\n            }\r\n        }\r\n    }),\r\n);\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const socket = useSocket();\r\n    const usersList = useSelector((state: stateT) => state.users.usersList);\r\n\r\n    const usersItems = usersList.map((user, i) => (\r\n        <ListItem key={i}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    <InsertEmoticonIcon />\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText className={classes.userItem} primary={user} />\r\n        </ListItem>\r\n    ));\r\n\r\n    useEffect(() => {\r\n        socket.on('disconnect', () => dispatch(leaveChat()));\r\n        return () => { socket.off('disconnect', () => dispatch(leaveChat())) };\r\n    });\r\n\r\n    useEffect(() => {\r\n        socket.on('users list update', (usersList: string[]) => {\r\n            dispatch(updateUsers(usersList))\r\n        });\r\n\r\n        return () => { socket.off('users list update') }\r\n    });\r\n\r\n    return (\r\n        <Paper>\r\n            <List dense={false} className={classes.list}>\r\n                {usersItems}\r\n            </List>\r\n        </Paper>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Container, Grid, CssBaseline, Box } from '@material-ui/core'\r\nimport Join from '../Join'\r\nimport ChatList from '../ChatList'\r\nimport MessageInput from '../MessageInput'\r\nimport Users from '../Users'\r\nimport './App.css';\r\nimport { stateT } from '../../common/types'\r\n\r\nfunction App() {\r\n  const user = useSelector((state: stateT) => state.users.user);\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Container>\r\n        <Box my={1}>\r\n          <Join />\r\n        </Box>\r\n        {\r\n          user ?\r\n            <>\r\n              <Grid container direction=\"row-reverse\" spacing={1}>\r\n                <Grid item xs={12} sm={4}>\r\n                  <Users />\r\n                </Grid>\r\n                <Grid item xs={12} sm={8}>\r\n                  <ChatList />\r\n                  <Box mt={1}>\r\n                    <MessageInput />\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n            : null\r\n        }\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const initialState = {\r\n    users: {\r\n        user: '',\r\n        usersList: []\r\n    },\r\n    messages: [],\r\n}","import { combineReducers } from 'redux'\r\nimport { users } from './users'\r\nimport { messages } from './messages'\r\n\r\nconst rootReducer = combineReducers({\r\n    users,\r\n    messages\r\n})\r\n\r\nexport default rootReducer","import { initialState } from '../common/consts'\r\nimport { actionTypes as actions, actionsT } from '../actions/types'\r\n\r\nexport function users(state = initialState.users, action: actionsT) {\r\n    switch (action.type) {\r\n        case actions.joinUser:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n              //  usersList: [ ...state.usersList, action.user ]\r\n             };\r\n        case actions.leaveChat:\r\n            return {\r\n                user: '',\r\n                usersList: []\r\n            };\r\n        case actions.updateUsers:\r\n            return {\r\n                ...state,\r\n                usersList: action.users\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { initialState } from '../common/consts'\r\nimport { actionTypes as actions, actionsT } from '../actions/types'\r\n\r\nexport function messages(state = initialState.messages, action: actionsT) {\r\n    switch (action.type) {\r\n        case actions.postMsg:\r\n            return [...state, action.msg];\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n//import { initialState } from '../common/consts';\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    const { logger } = require('redux-logger');\r\n    middlewares.push(logger);\r\n}\r\n\r\nexport default () => {\r\n    return createStore(rootReducer, applyMiddleware(...middlewares)) //initialState, \r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './store';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}